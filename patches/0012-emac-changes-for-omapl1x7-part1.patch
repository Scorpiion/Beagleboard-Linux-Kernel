Index: primus-kernel/arch/arm/mach-davinci/board-omapl1x7-evm.c
===================================================================
--- primus-kernel.orig/arch/arm/mach-davinci/board-omapl1x7-evm.c
+++ primus-kernel/arch/arm/mach-davinci/board-omapl1x7-evm.c
@@ -45,9 +45,67 @@
 #include <mach/serial.h>
 #include <mach/mux.h>
 #include <mach/i2c.h>
+#include <linux/platform_device.h>
+#include <linux/i2c.h>
+#include <linux/i2c/at24.h>
+#include <linux/etherdevice.h>
+#include <mach/emac.h>
 
 #include "clock.h"
 
+/* Most of this EEPROM is unused, but U-Boot uses some data:
+ *  - 0x7f00, 6 bytes Ethernet Address
+ *  - ... newer boards may have more
+ */
+static struct at24_iface *at24_if;
+
+static int at24_setup(struct at24_iface *iface, void *context)
+{
+	DECLARE_MAC_BUF(mac_str);
+	char mac_addr[6];
+
+	at24_if = iface;
+
+	/* Read MAC addr from EEPROM */
+	if (at24_if->read(at24_if, mac_addr, 0x7f00, 6) == 6) {
+		printk(KERN_INFO "Read MAC addr from EEPROM: %s\n",
+		print_mac(mac_str, mac_addr));
+
+		davinci_init_emac(mac_addr);
+	}
+	return 0;
+}
+
+static struct at24_platform_data eeprom_info = {
+	.byte_len	= (256*1024) / 8,
+	.page_size	= 64,
+	.flags		= AT24_FLAG_ADDR16,
+	.setup		= at24_setup,
+};
+
+int omapl1x7evm_eeprom_read(void *buf, off_t off, size_t count)
+{
+	if (at24_if)
+		return at24_if->read(at24_if, buf, off, count);
+	return -ENODEV;
+}
+EXPORT_SYMBOL(omapl1x7evm_eeprom_read);
+
+int omapl1x7evm_eeprom_write(void *buf, off_t off, size_t count)
+{
+	if (at24_if)
+		return at24_if->write(at24_if, buf, off, count);
+	return -ENODEV;
+}
+EXPORT_SYMBOL(omapl1x7evm_eeprom_write);
+
+static struct i2c_board_info __initdata i2c_info[] =  {
+	{
+		I2C_BOARD_INFO("24c256", 0x50),
+		.platform_data  = &eeprom_info,
+	},
+};
+
 static struct davinci_i2c_platform_data omapl1x7_i2c_data0 = {
 	.bus_freq       = 100,
 	.bus_delay      = 0,
@@ -60,6 +118,7 @@ static struct davinci_uart_config uart_c
 static void __init omapl1x7_evm_init_i2c(void)
 {
 	davinci_init_i2c(&omapl1x7_i2c_data0);
+	i2c_register_board_info(1, i2c_info, ARRAY_SIZE(i2c_info));
 }
 
 static void __init omapl1x7_map_io(void)
Index: primus-kernel/arch/arm/mach-davinci/omapl1x7.c
===================================================================
--- primus-kernel.orig/arch/arm/mach-davinci/omapl1x7.c
+++ primus-kernel/arch/arm/mach-davinci/omapl1x7.c
@@ -140,7 +140,7 @@ static struct clk timer0_clk = {
 	.parent = &aux_clkin,
 };
 
-static struct clk wdt_clk = {
+static struct clk watchdog_clk = {
 	.name = "watchdog",
 	.parent = &aux_clkin,
 };
@@ -151,6 +151,12 @@ static struct clk i2c_clk = {
 	.lpsc = OMAPL1X7_LPSC_I2C,
 };
 
+static struct clk emac_clk = {
+	.name = "emac",
+	.parent = &pll1_sysclk4,
+	.lpsc = OMAPL1X7_LPSC_CPGMAC,
+};
+
 static struct clk *omapl1x7_clks[] __initdata = {
 	&ref_clk,
 	&aux_clkin,
@@ -169,8 +175,9 @@ static struct clk *omapl1x7_clks[] __ini
 	&uart1_clk,
 	&uart2_clk,
 	&timer0_clk,
-	&wdt_clk,
+	&watchdog_clk,
 	&i2c_clk,
+	&emac_clk,
 	NULL,
 };
 
@@ -191,6 +198,15 @@ OMAPL1X7_MUX_CFG(OMAPL1X7,	I2C1_SCL,	8, 
 OMAPL1X7_MUX_CFG(OMAPL1X7,	I2C1_SDA,	8,   4,     15,   2,     false)
 OMAPL1X7_MUX_CFG(OMAPL1X7,	I2C0_SDA,	8,   12,    15,   2,     false)
 OMAPL1X7_MUX_CFG(OMAPL1X7,	I2C0_SCL,	8,   16,    15,   2,     false)
+OMAPL1X7_MUX_CFG(OMAPL1X7,	RMII_TXD_0,	10,  4,     15,   2,     false)
+OMAPL1X7_MUX_CFG(OMAPL1X7,	RMII_TXD_1,	10,  8,     15,   2,     false)
+OMAPL1X7_MUX_CFG(OMAPL1X7,	RMII_TXEN,	10,  12,    15,   2,     false)
+OMAPL1X7_MUX_CFG(OMAPL1X7,	RMII_CRS_DV,	10,  16,    15,   2,     false)
+OMAPL1X7_MUX_CFG(OMAPL1X7,	RMII_RXD_0,	10,  20,    15,   2,     false)
+OMAPL1X7_MUX_CFG(OMAPL1X7,	RMII_RXD_1,	10,  24,    15,   2,     false)
+OMAPL1X7_MUX_CFG(OMAPL1X7,	RMII_RXER,	10,  28,    15,   2,     false)
+OMAPL1X7_MUX_CFG(OMAPL1X7,	MDIO_CLK,	11,  0,     15,   2,     false)
+OMAPL1X7_MUX_CFG(OMAPL1X7,	MDIO_D,		11,  4,     15,   2,     false)
 };
 
 void __init omapl1x7_init(void)
Index: primus-kernel/arch/arm/mach-davinci/include/mach/mux.h
===================================================================
--- primus-kernel.orig/arch/arm/mach-davinci/include/mach/mux.h
+++ primus-kernel/arch/arm/mach-davinci/include/mach/mux.h
@@ -171,6 +171,17 @@ enum davinci_omapl1x7_index {
 	OMAPL1X7_I2C1_SDA,
 	OMAPL1X7_I2C0_SDA,
 	OMAPL1X7_I2C0_SCL,
+
+	/* EMAC function */
+	OMAPL1X7_RMII_TXD_0,
+	OMAPL1X7_RMII_TXD_1,
+	OMAPL1X7_RMII_TXEN,
+	OMAPL1X7_RMII_CRS_DV,
+	OMAPL1X7_RMII_RXD_0,
+	OMAPL1X7_RMII_RXD_1,
+	OMAPL1X7_RMII_RXER,
+	OMAPL1X7_MDIO_CLK,
+	OMAPL1X7_MDIO_D,
 };
 
 #ifdef CONFIG_DAVINCI_MUX
Index: primus-kernel/arch/arm/mach-davinci/devices.c
===================================================================
--- primus-kernel.orig/arch/arm/mach-davinci/devices.c
+++ primus-kernel/arch/arm/mach-davinci/devices.c
@@ -412,13 +412,89 @@ static struct platform_device dm646x_ema
 	}
 };
 
+#define RESOURCE_IRQ	4
+
+static struct resource omapl1x7_emac_resources [] = {
+        {
+                .start  = OMAPL1X7_EMAC_CPGMAC_BASE,
+                .end    = OMAPL1X7_EMAC_CPGMAC_BASE + 0xfff,
+                .flags  = IORESOURCE_MEM,
+                .name   = "ctrl_regs",
+        },
+        {
+                .start  = OMAPL1X7_EMAC_CPGMACSS_BASE,
+                .end    = OMAPL1X7_EMAC_CPGMACSS_BASE + 0xfff,
+                .flags  = IORESOURCE_MEM,
+                .name   = "ctrl_module_regs",
+        },
+        {
+                .start  = OMAPL1X7_EMAC_CPPI_PORT_BASE,
+                .end    = OMAPL1X7_EMAC_CPPI_PORT_BASE + 0x1fff,
+                .flags  = IORESOURCE_MEM,
+                .name   = "ctrl_ram",
+        },
+        {
+                .start  = OMAPL1X7_EMAC_MDIO_BASE,
+                .end    = OMAPL1X7_EMAC_MDIO_BASE + 0xfff,
+                .flags  = IORESOURCE_MEM,
+                .name   = "mdio_regs",
+        },
+        [RESOURCE_IRQ] = {
+                .start  = IRQ_OMAPL1X7_C0_RX_THRESH_PULSE,
+                .end	= IRQ_OMAPL1X7_C0_RX_THRESH_PULSE,
+                .flags  = IORESOURCE_IRQ,
+                .name   = "mac_rx_threshold",
+        },
+        {
+                .start  = IRQ_OMAPL1X7_C0_RX_PULSE,
+                .end	= IRQ_OMAPL1X7_C0_RX_PULSE,
+                .flags  = IORESOURCE_IRQ,
+                .name   = "mac_rx",
+        },
+        {
+                .start  = IRQ_OMAPL1X7_C0_TX_PULSE,
+                .end	= IRQ_OMAPL1X7_C0_TX_PULSE,
+                .flags  = IORESOURCE_IRQ,
+                .name   = "mac_tx",
+        },
+        {
+                .start  = IRQ_OMAPL1X7_C0_MISC_PULSE,
+                .end	= IRQ_OMAPL1X7_C0_MISC_PULSE,
+                .flags  = IORESOURCE_IRQ,
+                .name   = "mac_misc",
+        },
+};
+
+static struct platform_device omapl1x7_emac_device = {
+        .name = "davinci_emac",
+        .id = 1,
+        .num_resources = ARRAY_SIZE(omapl1x7_emac_resources),
+        .resource = omapl1x7_emac_resources,
+        .dev = {
+                .platform_data = &emac_pdata,
+        }
+};
+
 void davinci_init_emac(char *mac_addr)
 {
 	DECLARE_MAC_BUF(buf);
 
-	if (!(cpu_is_davinci_dm644x() || cpu_is_davinci_dm646x()))
+	if (!(cpu_is_davinci_dm644x() || cpu_is_davinci_dm646x()
+		|| cpu_is_omapl1x7()))
 		return;
 
+	if (cpu_is_omapl1x7()) {
+		davinci_cfg_reg(OMAPL1X7_RMII_TXD_0);
+		davinci_cfg_reg(OMAPL1X7_RMII_TXD_1);
+		davinci_cfg_reg(OMAPL1X7_RMII_TXEN);
+		davinci_cfg_reg(OMAPL1X7_RMII_CRS_DV);
+		davinci_cfg_reg(OMAPL1X7_RMII_RXD_0);
+		davinci_cfg_reg(OMAPL1X7_RMII_RXD_1);
+		davinci_cfg_reg(OMAPL1X7_RMII_RXER);
+		davinci_cfg_reg(OMAPL1X7_MDIO_CLK);
+		davinci_cfg_reg(OMAPL1X7_MDIO_D);
+	}
+
 	/* if valid MAC exists, don't re-register */
 	if (is_valid_ether_addr(emac_pdata.mac_addr))
 		return;
@@ -434,8 +510,10 @@ void davinci_init_emac(char *mac_addr)
 	}
 	if ((cpu_is_davinci_dm644x()))
 		(void) platform_device_register(&davinci_emac_device);
-	else
+	else if (cpu_is_davinci_dm646x())
 		(void) platform_device_register(&dm646x_emac_device);
+	else
+		(void) platform_device_register(&omapl1x7_emac_device);
 }
 
 #else
