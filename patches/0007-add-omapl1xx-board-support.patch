Index: primus-kernel/arch/arm/boot/compressed/head.S
===================================================================
--- primus-kernel.orig/arch/arm/boot/compressed/head.S
+++ primus-kernel/arch/arm/boot/compressed/head.S
@@ -154,6 +154,10 @@ not_angel:
 		 */
 
 		.text
+#ifdef CONFIG_CPU_DCACHE_WRITETHROUGH
+                mov     r0, #4                  @ put dcache in WT mode
+                mcr     p15, 7, r0, c15, c0, 0
+#endif
 		adr	r0, LC0
 		ldmia	r0, {r1, r2, r3, r4, r5, r6, ip, sp}
 		subs	r0, r0, r1		@ calculate the delta offset
@@ -399,9 +403,17 @@ __setup_mmu:	sub	r3, r4, #16384		@ Page 
 		orr	r1, r1, #3 << 10
 		add	r2, r3, #16384
 1:		cmp	r1, r9			@ if virt > start of RAM
+#ifdef CONFIG_CPU_DCACHE_WRITETHROUGH
+                orrhs   r1, r1, #0x08           @ set cacheable
+#else
 		orrhs	r1, r1, #0x0c		@ set cacheable, bufferable
+#endif
 		cmp	r1, r10			@ if virt > end of RAM
+#ifdef CONFIG_CPU_DCACHE_WRITETHROUGH
+                bichs   r1, r1, #0x08           @ set cacheable
+#else
 		bichs	r1, r1, #0x0c		@ clear cacheable, bufferable
+#endif
 		str	r1, [r0], #4		@ 1:1 mapping
 		add	r1, r1, #1048576
 		teq	r0, r2
Index: primus-kernel/arch/arm/mach-davinci/Kconfig
===================================================================
--- primus-kernel.orig/arch/arm/mach-davinci/Kconfig
+++ primus-kernel/arch/arm/mach-davinci/Kconfig
@@ -7,15 +7,28 @@ comment "DaVinci Core Type"
 config ARCH_DAVINCI_DM644x
 	bool "DaVinci 644x based system"
 	select CPU_V5
+	select DAVINCI_SOC_USING_AINTC
 
 config ARCH_DAVINCI_DM646x
         bool "DaVinci 646x based system"
 	select CPU_V5
+	select DAVINCI_SOC_USING_AINTC
 
 config ARCH_DAVINCI_DM355
         bool "DaVinci 355 based system"
 	select CPU_V5
 
+config ARCH_OMAPL1x7
+	bool "OMAPL1x7 based system"
+	select CPU_V5
+	select DAVINCI_SOC_USING_CP_INTC
+
+config DAVINCI_SOC_USING_AINTC
+	bool
+
+config DAVINCI_SOC_USING_CP_INTC
+	bool
+
 comment "DaVinci Board Type"
 
 config MACH_DAVINCI_EVM
@@ -42,6 +55,14 @@ config MACH_DAVINCI_DM355_EVM
 	  Configure this option to specify the whether the board used
 	  for development is a DM355 EVM
 
+config MACH_OMAPL1X7_EVM
+	bool "TI OMAPL1x7 EVM"
+	default n
+	depends on ARCH_OMAPL1x7
+	help
+	  Configure this option to specify the whether the board used
+	  for development is a OMAPPL1x7 EVM
+
 config MACH_SFFSDR
 	bool "Lyrtech SFFSDR"
 	default n
Index: primus-kernel/arch/arm/mach-davinci/Makefile
===================================================================
--- primus-kernel.orig/arch/arm/mach-davinci/Makefile
+++ primus-kernel/arch/arm/mach-davinci/Makefile
@@ -13,9 +13,15 @@ obj-$(CONFIG_DAVINCI_MUX)		+= mux.o
 obj-$(CONFIG_ARCH_DAVINCI_DM644x)       += dm644x.o
 obj-$(CONFIG_ARCH_DAVINCI_DM646x)       += dm646x.o
 obj-$(CONFIG_ARCH_DAVINCI_DM355)        += dm355.o
+obj-$(CONFIG_ARCH_OMAPL1x7)		+= omapl1x7.o
+
+obj-$(CONFIG_DAVINCI_SOC_USING_AINTC)	+= irq.o
+obj-$(CONFIG_DAVINCI_SOC_USING_CP_INTC)	+= irq_cp_intc.o
 
 # Board specific
 obj-$(CONFIG_MACH_DAVINCI_EVM)  	+= board-dm644x-evm.o
 obj-$(CONFIG_MACH_DAVINCI_DM646X_EVM)	+= board-dm646x-evm.o
 obj-$(CONFIG_MACH_DAVINCI_DM355_EVM)	+= board-dm355-evm.o
 obj-$(CONFIG_MACH_SFFSDR)		+= board-sffsdr.o
+obj-$(CONFIG_ARCH_OMAPL1x7)		+= soc-omapl1x7.o
+obj-$(CONFIG_MACH_OMAPL1X7_EVM)		+= board-omapl1x7-evm.o
Index: primus-kernel/arch/arm/mach-davinci/Makefile.boot
===================================================================
--- primus-kernel.orig/arch/arm/mach-davinci/Makefile.boot
+++ primus-kernel/arch/arm/mach-davinci/Makefile.boot
@@ -1,3 +1,11 @@
+ifdef CONFIG_ARCH_DAVINCI
    zreladdr-y	:= 0x80008000
 params_phys-y	:= 0x80000100
 initrd_phys-y	:= 0x80800000
+endif
+
+ifdef CONFIG_ARCH_OMAPL1x7
+   zreladdr-y	:= 0xC0008000
+params_phys-y	:= 0xC0000100
+initrd_phys-y	:= 0xC0800000
+endif
Index: primus-kernel/arch/arm/mach-davinci/board-omapl1x7-evm.c
===================================================================
--- /dev/null
+++ primus-kernel/arch/arm/mach-davinci/board-omapl1x7-evm.c
@@ -0,0 +1,80 @@
+/*
+ * TI DaVinci OMAPL1X7 EVM board
+ *
+ * Derived from: arch/arm/mach-davinci/board-evm.c
+ * Copyright (C) 2006 Texas Instruments.
+ *
+ * (C) 2007-2008, MontaVista Software, Inc.
+ *
+ * This file is licensed under the terms of the GNU General Public License
+ * version 2. This program is licensed "as is" without any warranty of any
+ * kind, whether express or implied.
+ *
+ */
+
+/**************************************************************************
+ * Included Files
+ **************************************************************************/
+
+#include <linux/kernel.h>
+#include <linux/module.h>
+#include <linux/init.h>
+#include <linux/fs.h>
+#include <linux/major.h>
+#include <linux/root_dev.h>
+#include <linux/dma-mapping.h>
+#include <linux/serial.h>
+#include <linux/serial_8250.h>
+#include <linux/io.h>
+#include <linux/console.h>
+
+#include <asm/setup.h>
+#include <asm/mach-types.h>
+#include <asm/mach/arch.h>
+#include <asm/mach/map.h>
+#include <asm/mach/flash.h>
+#include <mach/irqs.h>
+#include <mach/edma.h>
+#include <linux/kgdb.h>
+#include <mach/common.h>
+#include <mach/cpu.h>
+#include <mach/clock.h>
+#include <mach/psc.h>
+#include <mach/omapl1x7.h>
+#include <mach/soc-omapl1x7.h>
+#include <mach/serial.h>
+#include <mach/mux.h>
+
+#include "clock.h"
+
+static struct davinci_uart_config uart_config __initdata = {
+	.enabled_uarts = ((1 << 0) | (1 << 1) | (1 << 2)),
+};
+
+static void __init omapl1x7_map_io(void)
+{
+	davinci_map_common_io();
+	omapl1x7_init();
+}
+
+static __init void omapl1x7_evm_init(void)
+{
+	davinci_cfg_reg(OMAPL1X7_UART2_RXD);
+	davinci_cfg_reg(OMAPL1X7_UART2_TXD);
+	davinci_serial_init(&uart_config);
+}
+
+static __init void omapl1x7_evm_irq_init(void)
+{
+	soc_omapl1x7_irq_init();
+}
+
+MACHINE_START(DAVINCI_DA8XX_EVM, "DaVinci OMAPL1X7 EVM")
+	.phys_io	= IO_PHYS,
+	.io_pg_offst	= (__IO_ADDRESS(IO_PHYS) >> 18) & 0xfffc,
+	.boot_params	= (0xC0000100),
+	.map_io		= omapl1x7_map_io,
+	.init_irq	= omapl1x7_evm_irq_init,
+	.timer		= &davinci_timer,
+	.init_machine	= omapl1x7_evm_init,
+MACHINE_END
Index: primus-kernel/arch/arm/mach-davinci/include/mach/io.h
===================================================================
--- primus-kernel.orig/arch/arm/mach-davinci/include/mach/io.h
+++ primus-kernel/arch/arm/mach-davinci/include/mach/io.h
@@ -26,6 +26,18 @@
 #define __IO_ADDRESS(x)	((x) + IO_OFFSET)
 
 /*
+ * Some platforms have the interrupt controller mapped at a different physical
+ * address.  This I/O map creates a virtual mapping of the interrupt controller
+ * that is common across platforms; it needs to apply to all platform variants.
+ * The interrupt controller address mapped in the IO_VIRT range should not be
+ * used.  The address is determined by the size of CP INTC address space (which
+ * is 4KB or 1 page) and a single page hole to reduce the chance for invalid
+ * memory access.
+ */
+#define IO_Dx_INTC_SIZE SZ_64K
+#define IO_Dx_INTC_VIRT 0xfebd0000
+
+/*
  * We don't actually have real ISA nor PCI buses, but there is so many
  * drivers out there that might just work if we fake them...
  */
Index: primus-kernel/arch/arm/mach-davinci/include/mach/memory.h
===================================================================
--- primus-kernel.orig/arch/arm/mach-davinci/include/mach/memory.h
+++ primus-kernel/arch/arm/mach-davinci/include/mach/memory.h
@@ -20,8 +20,13 @@
 /**************************************************************************
  * Definitions
  **************************************************************************/
+#ifdef CONFIG_ARCH_OMAPL1x7
+#define DAVINCI_DDR_BASE    0xc0000000
+#define DAVINCI_IRAM_BASE   0x80000000 /* ARM Internal RAM */
+#else
 #define DAVINCI_DDR_BASE    0x80000000
 #define DAVINCI_IRAM_BASE   0x00008000 /* ARM Internal RAM */
+#endif
 
 #define PHYS_OFFSET DAVINCI_DDR_BASE
 
Index: primus-kernel/arch/arm/mach-davinci/include/mach/omapl1x7.h
===================================================================
--- /dev/null
+++ primus-kernel/arch/arm/mach-davinci/include/mach/omapl1x7.h
@@ -0,0 +1,116 @@
+/*
+ * This file contains the processor specific definitions
+ * of the TI OMAPL1x7.
+ *
+ * Copyright (C) 2008 Texas Instruments.
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation; either version 2 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program; if not, write to the Free Software
+ * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
+ *
+ */
+#ifndef __ASM_ARCH_OMAPL1X7_H
+#define __ASM_ARCH_OMAPL1X7_H
+
+#include <mach/hardware.h>
+
+void __init omapl1x7_init(void);
+
+#define OMAPL1X7_BOOT_CFG_BASE		0x01C14000
+
+#define OMAPL1X7_KICK0             (OMAPL1X7_BOOT_CFG_BASE + 0x38)
+#define OMAPL1X7_KICK0_MAGIC       0x83e70b13
+#define OMAPL1X7_KICK1             (OMAPL1X7_BOOT_CFG_BASE + 0x3c)
+#define OMAPL1X7_KICK1_MAGIC       0x95a4f1e0
+
+/*#define PINMUX2         (DAVINCI_SYSTEM_MODULE_BASE + 0x08)
+#define PINMUX3         (DAVINCI_SYSTEM_MODULE_BASE + 0x0c)
+#define PINMUX4         (DAVINCI_SYSTEM_MODULE_BASE + 0x10)*/
+
+#if 0
+#define OMAPL1X7_PINMUX0   (OMAPL1X7_BOOT_CFG_BASE + 0x120)
+#define OMAPL1X7_PINMUX1   (OMAPL1X7_BOOT_CFG_BASE + 0x124)
+#define OMAPL1X7_PINMUX2   (OMAPL1X7_BOOT_CFG_BASE + 0x128)
+#define OMAPL1X7_PINMUX3   (OMAPL1X7_BOOT_CFG_BASE + 0x12C)
+#define OMAPL1X7_PINMUX4   (OMAPL1X7_BOOT_CFG_BASE + 0x130)
+#define OMAPL1X7_PINMUX5   (OMAPL1X7_BOOT_CFG_BASE + 0x134)
+#define OMAPL1X7_PINMUX6   (OMAPL1X7_BOOT_CFG_BASE + 0x138)
+#define OMAPL1X7_PINMUX7   (OMAPL1X7_BOOT_CFG_BASE + 0x13C)
+#define OMAPL1X7_PINMUX8   (OMAPL1X7_BOOT_CFG_BASE + 0x140)
+#define OMAPL1X7_PINMUX9   (OMAPL1X7_BOOT_CFG_BASE + 0x144)
+#define OMAPL1X7_PINMUX10  (OMAPL1X7_BOOT_CFG_BASE + 0x148)
+#define OMAPL1X7_PINMUX11  (OMAPL1X7_BOOT_CFG_BASE + 0x14C)
+#define OMAPL1X7_PINMUX12  (OMAPL1X7_BOOT_CFG_BASE + 0x150)
+#define OMAPL1X7_PINMUX13  (OMAPL1X7_BOOT_CFG_BASE + 0x154)
+#define OMAPL1X7_PINMUX14  (OMAPL1X7_BOOT_CFG_BASE + 0x158)
+#define OMAPL1X7_PINMUX15  (OMAPL1X7_BOOT_CFG_BASE + 0x15C)
+#define OMAPL1X7_PINMUX16  (OMAPL1X7_BOOT_CFG_BASE + 0x160)
+#define OMAPL1X7_PINMUX17  (OMAPL1X7_BOOT_CFG_BASE + 0x164)
+#define OMAPL1X7_PINMUX18  (OMAPL1X7_BOOT_CFG_BASE + 0x168)
+#define OMAPL1X7_PINMUX19  (OMAPL1X7_BOOT_CFG_BASE + 0x16C)
+#else
+#define OMAPL1X7_PINMUX0   (0x120)
+#define OMAPL1X7_PINMUX1   (0x124)
+#define OMAPL1X7_PINMUX2   (0x128)
+#define OMAPL1X7_PINMUX3   (0x12C)
+#define OMAPL1X7_PINMUX4   (0x130)
+#define OMAPL1X7_PINMUX5   (0x134)
+#define OMAPL1X7_PINMUX6   (0x138)
+#define OMAPL1X7_PINMUX7   (0x13C)
+#define OMAPL1X7_PINMUX8   (0x140)
+#define OMAPL1X7_PINMUX9   (0x144)
+#define OMAPL1X7_PINMUX10  (0x148)
+#define OMAPL1X7_PINMUX11  (0x14C)
+#define OMAPL1X7_PINMUX12  (0x150)
+#define OMAPL1X7_PINMUX13  (0x154)
+#define OMAPL1X7_PINMUX14  (0x158)
+#define OMAPL1X7_PINMUX15  (0x15C)
+#define OMAPL1X7_PINMUX16  (0x160)
+#define OMAPL1X7_PINMUX17  (0x164)
+#define OMAPL1X7_PINMUX18  (0x168)
+#define OMAPL1X7_PINMUX19  (0x16C)
+#endif
+
+#define OMAPL1X7_CFGCHIP0  (OMAPL1X7_BOOT_CFG_BASE + 0x17c)
+#define OMAPL1X7_CFGCHIP1  (OMAPL1X7_BOOT_CFG_BASE + 0x180)
+#define OMAPL1X7_CFGCHIP2  (OMAPL1X7_BOOT_CFG_BASE + 0x184)
+#define OMAPL1X7_CFGCHIP3  (OMAPL1X7_BOOT_CFG_BASE + 0x188)
+#define OMAPL1X7_CFGCHIP4  (OMAPL1X7_BOOT_CFG_BASE + 0x18c)
+
+#define OMAPL1X7_EMAC_CPPI_PORT_BASE	0x01E20000
+#define OMAPL1X7_EMAC_CPGMACSS_BASE	0x01E22000
+#define OMAPL1X7_EMAC_CPGMAC_BASE	0x01E23000
+#define OMAPL1X7_EMAC_MDIO_BASE		0x01E24000
+#define OMAPL1X7_I2C0_BASE		0x01C22000
+#define OMAPL1X7_I2C1_BASE		0x01E28000
+
+/* omapl1x7 cfg regs have to be unlocked by writing magic values to kick regs */
+#ifdef CONFIG_MACH_OMAPL1X7_EVM
+#define davinci_cfg_readl(a) ({                                         \
+	davinci_writel(OMAPL1X7_KICK0_MAGIC, OMAPL1X7_KICK0); /* unlock */    \
+	davinci_writel(OMAPL1X7_KICK1_MAGIC, OMAPL1X7_KICK1);                 \
+	davinci_readl(a);                                               \
+	/* davinci_writel(0, OMAPL1X7_KICK0);*/ /* lock */                 \
+})
+#define davinci_cfg_writel(v,a) ({                                      \
+	davinci_writel(OMAPL1X7_KICK0_MAGIC, OMAPL1X7_KICK0); /* unlock */    \
+	davinci_writel(OMAPL1X7_KICK1_MAGIC, OMAPL1X7_KICK1);                 \
+	davinci_writel(v, a);                                            \
+	/*davinci_writel(0, OMAPL1X7_KICK0);*/ /* lock */                  \
+})
+#else
+#define davinci_cfg_readl(a)    (davinci_readl(a))
+#define davinci_cfg_writel(v, a) (davinci_writel(v, a))
+#endif
+
+#endif /* __ASM_ARCH_OMAPL1X7_H */
Index: primus-kernel/arch/arm/mach-davinci/include/mach/soc-omapl1x7.h
===================================================================
--- /dev/null
+++ primus-kernel/arch/arm/mach-davinci/include/mach/soc-omapl1x7.h
@@ -0,0 +1,16 @@
+/*
+ * TI OMAPPL1x7 SOC header file
+ *
+ * 2008, MontaVista Software, Inc.
+ *
+ * This file is licensed under the terms of the GNU General Public License
+ * version 2. This program is licensed "as is" without any warranty of any
+ * kind, whether express or implied.
+ *
+ */
+#ifndef SOC_OMAPPL1X7_H
+#define SOC_OMAPPL1X7_H
+
+void __init soc_omapl1x7_irq_init(void);
+
+#endif /* SOC_OMAPPL1X7_H */
Index: primus-kernel/arch/arm/mach-davinci/include/mach/uncompress.h
===================================================================
--- primus-kernel.orig/arch/arm/mach-davinci/include/mach/uncompress.h
+++ primus-kernel/arch/arm/mach-davinci/include/mach/uncompress.h
@@ -17,7 +17,11 @@
 
 static void putc(char c)
 {
+#ifdef CONFIG_ARCH_OMAPL1x7
+	volatile u32 *uart = (volatile void *) OMAPL1X7_UART2_BASE;
+#else
 	volatile u32 *uart = (volatile void *) DAVINCI_UART0_BASE;
+#endif
 
 	while (!(uart[UART_LSR] & UART_LSR_THRE))
 		barrier();
@@ -26,7 +30,11 @@ static void putc(char c)
 
 static inline void flush(void)
 {
+#ifdef CONFIG_ARCH_OMAPL1x7
+	volatile u32 *uart = (volatile void *) OMAPL1X7_UART2_BASE;
+#else
 	volatile u32 *uart = (volatile void *) DAVINCI_UART0_BASE;
+#endif
 	while (!(uart[UART_LSR] & UART_LSR_THRE))
 		barrier();
 }
Index: primus-kernel/arch/arm/mach-davinci/io.c
===================================================================
--- primus-kernel.orig/arch/arm/mach-davinci/io.c
+++ primus-kernel/arch/arm/mach-davinci/io.c
@@ -19,6 +19,10 @@
 #include <asm/mach/map.h>
 #include <mach/clock.h>
 #include <mach/mux.h>
+#include <mach/cpu.h>
+#include <mach/omapl1x7.h>
+
+#define OMAPL1X7_ARM_INTC_BASE	0xFFFEE000
 
 extern void davinci_check_revision(void);
 
@@ -35,6 +39,15 @@ static struct map_desc davinci_io_desc[]
 	},
 };
 
+static struct map_desc omapl1x7_intc_desc[] __initdata = {
+	{
+		.virtual	= IO_Dx_INTC_VIRT,
+		.pfn		= __phys_to_pfn(OMAPL1X7_ARM_INTC_BASE),
+		.length		= IO_Dx_INTC_SIZE,
+		.type		= MT_DEVICE
+	},
+};
+
 void __init davinci_map_common_io(void)
 {
 	iotable_init(davinci_io_desc, ARRAY_SIZE(davinci_io_desc));
@@ -50,6 +63,14 @@ void __init davinci_map_common_io(void)
 	 * IO space mapping must be initialized before we can do that.
 	 */
 	davinci_check_revision();
+
+	/*
+	 * Map the interrupt controller to a common address across all
+	 * SoCs.  Other SoC specific mapping can go here as well.
+	 */
+	if (cpu_is_omapl1x7())
+		iotable_init(omapl1x7_intc_desc,
+				ARRAY_SIZE(omapl1x7_intc_desc));
 }
 
 #define BETWEEN(p, st, sz)	((p) >= (st) && (p) < ((st) + (sz)))
Index: primus-kernel/arch/arm/mach-davinci/soc-omapl1x7.c
===================================================================
--- /dev/null
+++ primus-kernel/arch/arm/mach-davinci/soc-omapl1x7.c
@@ -0,0 +1,28 @@
+/*
+ * TI OMAPPL1x7 SOC specific code
+ *
+ * 2008, MontaVista Software, Inc.
+ *
+ * This file is licensed under the terms of the GNU General Public License
+ * version 2. This program is licensed "as is" without any warranty of any
+ * kind, whether express or implied.
+ *
+ */
+
+#include <linux/init.h>
+#include <linux/io.h>
+#include <linux/types.h>
+#include <mach/irqs.h>
+#include <mach/irq_cp_intc.h>
+
+static struct cp_intc_irq_data soc_omapl1x7_cp_intc = {
+	.base = IO_Dx_INTC_VIRT,
+	.num_host_irqs = 2,
+	.host_irq = 1,
+	.max_irq = IRQ_OMAPL1X7_ARMCLKSTOPREQ + 1,
+};
+
+void __init soc_omapl1x7_irq_init(void)
+{
+	cp_intc_init(&soc_omapl1x7_cp_intc);
+}
