Index: primus-kernel/arch/arm/mach-davinci/board-omapl1x7-evm.c
===================================================================
--- primus-kernel.orig/arch/arm/mach-davinci/board-omapl1x7-evm.c
+++ primus-kernel/arch/arm/mach-davinci/board-omapl1x7-evm.c
@@ -45,11 +45,13 @@
 #include <mach/serial.h>
 #include <mach/mux.h>
 #include <mach/i2c.h>
+#include <linux/gpio.h>
 #include <linux/platform_device.h>
 #include <linux/i2c.h>
 #include <linux/i2c/at24.h>
 #include <linux/etherdevice.h>
 #include <mach/emac.h>
+#include <mach/mmc.h>
 
 #include "clock.h"
 
@@ -99,6 +101,44 @@ int omapl1x7evm_eeprom_write(void *buf, 
 }
 EXPORT_SYMBOL(omapl1x7evm_eeprom_write);
 
+static int omapl1x7_evm_mmc_get_ro(int index)
+{
+	int val, status, gpio_num = 33;
+
+	status = gpio_request(gpio_num, "MMC WP\n");
+	if (status < 0) {
+		printk(KERN_WARNING "%s can not open GPIO %d\n", __func__,
+				gpio_num);
+		return 0;
+	}
+	gpio_direction_input(gpio_num);
+	val = gpio_get_value(gpio_num);
+	gpio_free(gpio_num);
+	return val;
+}
+
+static int omapl1x7_evm_mmc_get_cd(int index)
+{
+	int val, status, gpio_num = 34;
+       
+	status = gpio_request(gpio_num, "MMC CD\n");
+	if (status < 0) {
+		printk(KERN_WARNING "%s can not open GPIO %d\n", __func__,
+				gpio_num);
+		return 0;
+	}
+	gpio_direction_input(gpio_num);
+	val = gpio_get_value(gpio_num);
+	gpio_free(gpio_num);
+	return !val;
+}
+
+static struct davinci_mmc_config omapl1x7_mmc_config = {
+	.get_ro         = omapl1x7_evm_mmc_get_ro,
+	.get_cd		= omapl1x7_evm_mmc_get_cd,
+	.wires          = 4
+};
+
 static struct i2c_board_info __initdata i2c_info[] =  {
 	{
 		I2C_BOARD_INFO("24c256", 0x50),
@@ -133,6 +173,8 @@ static __init void omapl1x7_evm_init(voi
 	davinci_cfg_reg(OMAPL1X7_UART2_TXD);
 	davinci_serial_init(&uart_config);
 	omapl1x7_evm_init_i2c();
+
+	davinci_setup_mmc(0, &omapl1x7_mmc_config);
 }
 
 static __init void omapl1x7_evm_irq_init(void)
Index: primus-kernel/arch/arm/mach-davinci/devices.c
===================================================================
--- primus-kernel.orig/arch/arm/mach-davinci/devices.c
+++ primus-kernel/arch/arm/mach-davinci/devices.c
@@ -42,6 +42,7 @@
 #define DAVINCI_MMCSD0_BASE	     0x01E10000
 #define DM355_MMCSD0_BASE	     0x01E11000
 #define DM355_MMCSD1_BASE	     0x01E00000
+#define OMAPL1X7_MMC_SD0_BASE	     0x01C40000
 
 #ifndef CONFIG_MACH_OMAPL1X7_EVM
 static struct resource i2c_resources[] = {
@@ -207,6 +208,35 @@ static struct platform_device davinci_mm
 	.resource = mmcsd1_resources,
 };
 
+static struct resource omapl1x7_mmc_resources[] = {
+	{		 /* registers */
+		.start	= OMAPL1X7_MMC_SD0_BASE,
+		.end	= OMAPL1X7_MMC_SD0_BASE + SZ_4K - 1,
+		.flags	= IORESOURCE_MEM,
+	},
+	{		 /* interrupt */
+		.start	= IRQ_OMAPL1X7_MMCSDINT0,
+		.end	= IRQ_OMAPL1X7_MMCSDINT0,
+		.flags	= IORESOURCE_IRQ,
+	},
+	{		 /* DMA RX */
+		.start	= 16,
+		.end	= 16,
+		.flags	= IORESOURCE_DMA,
+	},
+	{		 /* DMA TX */
+		.start	= 17,
+		.end	= 17,
+		.flags	= IORESOURCE_DMA,
+	},
+};
+
+static struct platform_device omapl1x7_mmc_device = {
+	.name		= "davinci_mmc",
+	.id		= 0,
+	.num_resources	= ARRAY_SIZE(omapl1x7_mmc_resources),
+	.resource	= omapl1x7_mmc_resources,
+};
 
 void __init davinci_setup_mmc(int module, struct davinci_mmc_config *config)
 {
@@ -264,7 +294,21 @@ void __init davinci_setup_mmc(int module
 			davinci_cfg_reg(DM644X_MSTK);
 		}
 
-		pdev = &davinci_mmcsd0_device;
+		else if (cpu_is_omapl1x7()) {
+			pdev = &omapl1x7_mmc_device;
+			davinci_cfg_reg(OMAPL1X7_MMCSD_DAT_0);
+			davinci_cfg_reg(OMAPL1X7_MMCSD_DAT_1);
+			davinci_cfg_reg(OMAPL1X7_MMCSD_DAT_2);
+			davinci_cfg_reg(OMAPL1X7_MMCSD_DAT_3);
+			davinci_cfg_reg(OMAPL1X7_MMCSD_DAT_4);
+			davinci_cfg_reg(OMAPL1X7_MMCSD_DAT_5);
+			davinci_cfg_reg(OMAPL1X7_MMCSD_DAT_6);
+			davinci_cfg_reg(OMAPL1X7_MMCSD_DAT_7);
+			davinci_cfg_reg(OMAPL1X7_MMCSD_CLK);
+			davinci_cfg_reg(OMAPL1X7_MMCSD_CMD);
+		} else
+			pdev = &davinci_mmcsd0_device;
+
 		clockname = cpu_is_davinci_dm355() ? "mmcsd0" : "mmcsd";
 		break;
 	}
Index: primus-kernel/arch/arm/mach-davinci/include/mach/mux.h
===================================================================
--- primus-kernel.orig/arch/arm/mach-davinci/include/mach/mux.h
+++ primus-kernel/arch/arm/mach-davinci/include/mach/mux.h
@@ -182,6 +182,18 @@ enum davinci_omapl1x7_index {
 	OMAPL1X7_RMII_RXER,
 	OMAPL1X7_MDIO_CLK,
 	OMAPL1X7_MDIO_D,
+
+	/* MMC/SD function */
+	OMAPL1X7_MMCSD_DAT_0,
+	OMAPL1X7_MMCSD_DAT_1,
+	OMAPL1X7_MMCSD_DAT_2,
+	OMAPL1X7_MMCSD_DAT_3,
+	OMAPL1X7_MMCSD_DAT_4,
+	OMAPL1X7_MMCSD_DAT_5,
+	OMAPL1X7_MMCSD_DAT_6,
+	OMAPL1X7_MMCSD_DAT_7,
+	OMAPL1X7_MMCSD_CLK,
+	OMAPL1X7_MMCSD_CMD,
 };
 
 #ifdef CONFIG_DAVINCI_MUX
Index: primus-kernel/arch/arm/mach-davinci/omapl1x7.c
===================================================================
--- primus-kernel.orig/arch/arm/mach-davinci/omapl1x7.c
+++ primus-kernel/arch/arm/mach-davinci/omapl1x7.c
@@ -184,6 +184,12 @@ static struct clk edma_tc1_clk = {
 	.flags = ALWAYS_ENABLED,
 };
 
+static struct clk mmcsd_clk = {
+	.name = "mmcsd",
+	.parent = &pll1_sysclk2,
+	.lpsc = OMAPL1X7_LPSC_MMC_SD,
+};
+
 static struct clk *omapl1x7_clks[] __initdata = {
 	&ref_clk,
 	&aux_clkin,
@@ -209,6 +215,7 @@ static struct clk *omapl1x7_clks[] __ini
 	&edma_cc0_clk,
 	&edma_tc0_clk,
 	&edma_tc1_clk,
+	&mmcsd_clk,
 	NULL,
 };
 
@@ -238,6 +245,16 @@ OMAPL1X7_MUX_CFG(OMAPL1X7,	RMII_RXD_1,	1
 OMAPL1X7_MUX_CFG(OMAPL1X7,	RMII_RXER,	10,  28,    15,   2,     false)
 OMAPL1X7_MUX_CFG(OMAPL1X7,	MDIO_CLK,	11,  0,     15,   2,     false)
 OMAPL1X7_MUX_CFG(OMAPL1X7,	MDIO_D,		11,  4,     15,   2,     false)
+OMAPL1X7_MUX_CFG(OMAPL1X7,	MMCSD_DAT_0,	13,  24,    15,   2,     false)
+OMAPL1X7_MUX_CFG(OMAPL1X7,	MMCSD_DAT_1,	13,  28,    15,   2,     false)
+OMAPL1X7_MUX_CFG(OMAPL1X7,	MMCSD_DAT_2,	14,  0,     15,   2,     false)
+OMAPL1X7_MUX_CFG(OMAPL1X7,	MMCSD_DAT_3,	14,  4,     15,   2,     false)
+OMAPL1X7_MUX_CFG(OMAPL1X7,	MMCSD_DAT_4,	14,  8,     15,   2,     false)
+OMAPL1X7_MUX_CFG(OMAPL1X7,	MMCSD_DAT_5,	14,  12,    15,   2,     false)
+OMAPL1X7_MUX_CFG(OMAPL1X7,	MMCSD_DAT_6,	14,  16,    15,   2,     false)
+OMAPL1X7_MUX_CFG(OMAPL1X7,	MMCSD_DAT_7,	14,  20,    15,   2,     false)
+OMAPL1X7_MUX_CFG(OMAPL1X7,	MMCSD_CLK,	15,  28,    15,   2,     false)
+OMAPL1X7_MUX_CFG(OMAPL1X7,	MMCSD_CMD,	16,  0,     15,   2,     false)
 };
 
 void __init omapl1x7_init(void)
Index: primus-kernel/drivers/mmc/host/davinci_mmc.c
===================================================================
--- primus-kernel.orig/drivers/mmc/host/davinci_mmc.c
+++ primus-kernel/drivers/mmc/host/davinci_mmc.c
@@ -35,6 +35,7 @@
 #include <mach/cpu.h>
 #include <mach/edma.h>
 #include <mach/hardware.h>
+#include <mach/omapl1x7.h>
 #include <mach/irqs.h>
 
 /*
@@ -357,6 +358,12 @@ static void mmc_davinci_start_command(st
 	if (host->do_dma)
 		cmd_reg |= MMCCMD_DMATRIG;
 
+	if (cpu_is_omapl1x7()) {
+		if ((host->data != NULL) &&
+	    		(host->data_dir == DAVINCI_MMC_DATADIR_READ))
+			cmd_reg |= MMCCMD_DMATRIG;
+	}
+
 	/* Setting whether command involves data transfer or not */
 	if (cmd->data)
 		cmd_reg |= MMCCMD_WDATX;
@@ -433,8 +440,8 @@ static void mmc_davinci_dma_cb(unsigned 
 		dev_warn(mmc_dev(host->mmc), "DMA %s error\n",
 			(host->data->flags & MMC_DATA_WRITE)
 				? "write" : "read");
-		host->data->error = -EIO;
-		mmc_davinci_xfer_done(host, host->data);
+		//host->data->error = -EIO;
+		//mmc_davinci_xfer_done(host, host->data);
 	}
 }
 
@@ -549,6 +556,8 @@ static void mmc_davinci_send_dma_request
 		edma_write_slot(slot, template);
 	}
 
+	if (cpu_is_omapl1x7())
+		edma_clear_event(channel);
 	edma_start(channel);
 }
 
@@ -647,7 +656,11 @@ free_master_write:
 static void
 mmc_davinci_prepare_data(struct mmc_davinci_host *host, struct mmc_request *req)
 {
+#ifdef CONFIG_ARCH_OMAPL1x7
+	int fifo_lev = (rw_threshold == 64) ? MMCFIFOCTL_FIFOLEV : 0;
+#else
 	int fifo_lev = (rw_threshold == 32) ? MMCFIFOCTL_FIFOLEV : 0;
+#endif
 	int timeout;
 	struct mmc_data *data = req->data;
 
